#!/usr/bin/env python

import math

from Crypto.Util.number import isPrime, getPrime, GCD, long_to_bytes, bytes_to_long

# ===================================================================== problem

CT = int('11527ef661b63f0e8df26e78d79b614cb63e834da05bf333856a97f81d74aec58aefbda52dd6ee164447cb3cd64869aee935d9e961ea12375354eea7e21a6790', 16)
IV = int('2d2e1e8a88205995ce2d76d244c28b2b', 16)
N  = int('6977872954453287113318928946533004640573076971270404736649857554109814714767232598626781851567154954553736188657231769647898054950996488674893670519816653', 16)
A  = (2851572783042418026133996814250879893796058672204604585672807372129430580698309059946087548171123066371647509247443388126483506717427455136382648462997156, 6229895414423825093970708176923792736711251122090113458666591518448699655186597924150954711460449644605774495375106765029330485916590545376676075133841422)
B  = (4462129553869194635110347913537781447163673151204817501735057255299985150330059138351040776905457304373656070189763506501461514517702259280043082926076418, 1012904040892509457148773549664059101097406279754569553936756270049573187157782900888372009243941138782308618768537282105721569482060963331594736944741842)

# ==================================================================== factor N

def next_prime(p, step):
    __p = p
    while not isPrime(__p):
        __p += step
    return __p

p = int(math.sqrt(N)) + 3 - (int(math.sqrt(N)) % 4) # force p % 4 == 3
while N % p:
    p = next_prime(p, 4)

q = N // p

print(f'p = {p}\nq = {q}')
