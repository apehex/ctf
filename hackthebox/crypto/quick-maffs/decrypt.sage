#!/usr/bin/env python3

N = 5981664384988507891478572449251897296717727847212579781448791472718547112403550208352320926002397616312181279859738938646168022481824206589739320298482728968548378237391009138243024910596491172979923991673446034011260330224409794208875199561844435663744993504673450898288161482849187018770655419007178851937895764901674192425054643548670616348302447202491340266057221307744866082461604674766259695903766772980842036324667567850124019171425634526227426965833985082234968255176231124754301435374519312001547854794352023852342682220352109083558778402466358598254431167382653831478713628185748237886560605604945010671417
CTS = [4064195644006411160585797813860027634920635349984344191047587061586620848352019080467087592184982883284356841385019453458842500930190512793665886381102812026066865666098391973664302897278510995945377153937248437062600080527317980210967973971371047319247120004523147629534186514628527555180736833194525516718549330721987873868571634294877416190209288629499265010822332662061001208360467692613959936438519512705706688327846470352610192922218603268096313278741647626899523312431823527174576009143724850631439559205050395629961996905961682800070679793831568617438035643749072976096500278297683944583609092132808342160168, 3972397619896893471633226994966440180689669532336298201562465946694941720775869427764056001983618377003841446300122954561092878433908258359050016399257266833626893700179430172867058140215023211349613449750819959868861260714924524414967854467488908710563470522800186889553825417008118394349306170727982570843758792622898850338954039322560740348595654863475541846505121081201633770673996898756298398831948133434844321091554344145679504115839940880338238034227536355386474785852916335583794757849746186832609785626770517073108801492522816245458992502698143396049695921044554959802743742110180934416272358039695942552488, 956566266150449406104687131427865505474798294715598448065695308619216559681163085440476088324404921175885831054464222377255942505087330963629877648302727892001779224319839877897857215091085980519442914974498275528112936281916338633178398286676523416008365096599844169979821513770606168325175652094633129536643417367820830724397070621662683223203491074814734747601002376621653739871373924630026694962642922871008486127796621355314581093953946913681152270251669050414866366693593651789709229310574005739535880988490183275291507128529820194381392682870291338920077175831052974790596134745552552808640002791037755434586]

# 7 * 2719 * 431311011575783866557567521 * 325802467640119693141041986013700504517
H = 2674558878275613295915981392537201653631411909654166620884912623530781

M = [5981664384988507891478572449251897296717727847212579781448791472718547112403550208352320926002397616312181279859738938646168022481824206589739320298482728968548378237391009138243024910596491172979923991673446034011260330224409794208875199561844435663744993504673450898288161482849187018770655419007178851937895764901674192425054643548670616348302447202491340266057221307744866082461604674766259695903766772980842036324667567850124019171425634526227426965833985082234968255176231124754301435374519312001547854794352023852342682220352109083558778402466358482025985318630320992505262372967497001008595681765399617235960, 5981664384988507891478572449251897296717727847212579781448791472718547112403550208352320926002397616312181279859738938646168022481824206589739320298482728968548378237391009138243024910596491172979923991673446034011260330224409794208875199561844435663744993504673450898288161482849187018770655419007178851937895764901674192425054643548670616348302447202491340266057221307744866082461604674766259695903766772980842036324667567850124019171425634526227426965833985082234968255176231124754301435374519312001547854794352023852342682220352109083558778402466358597655674005497801464684249563088547911829811358919828385319898, 598166438498850789147857244925189729671772784721257978144879147271854711240355020835232092600239761631218127985973893864616802248182420658973932029848272896854837823739100913824302491059649117297992399167344603401126033022440979420887519956184443566374499350467345089828816148284918701877065541900717885193789576490167419242505464354867061634830244720249134026605722130774486608246160467476625969590376677298084203632466756785012401917142563452622742696583398508223496825517623112475430143537451931200154785479435202385234268222035210908355877839979179983680602088210385False09427294869787891167108155244694405927612]

# ====================================================== Franklin-Reiter attack

def gcd_attack(e: int, n: int, w: int, c1: int, c2: int, c3: int):
    XY.<x,y> = PolynomialRing(Zmod(n))
    X.<x> = PolynomialRing(Zmod(n))

    # R1 = P1 has X=M1 as root
    r1 = (x^e - c1).change_ring(X)

    # when X=M1 both P2 and S2 have M2 as root
    p2 = (y^e - c2).change_ring(X)
    s2 = ((w - x - y)^e - c3).change_ring(X)

    # their resultant is null, so M1 is a root of S1
    s1 = p2.resultant(s2, variable=y)

    # Y-M1 | GCD(R1, S1)
    return r1.gcd(s1)

def basis_attack(e: int, n: int, w: int, c1: int, c2: int, c3: int):
    XYZ.<x,y,z> = PolynomialRing(Zmod(n))

    p0 = x + y + z - w
    p1 = x^e - c1
    p2 = y^e - c2
    p3 = z^e - c3

    i = ideal(p0, p1, p2, p3)

    return i.groebner_basis()

# ============================================================== bruteforcing e

for e in Primes():
    b = basis_attack(e, N, H, CTS[0], CTS[1], CTS[2])

    # progress
    print(f'{e}:\t{b}', end='\r')

    if len(b) > 1:
        break

# ======================================================= decoding the messages

m1 = N - b[0].coefficients()[1]
m2 = N - b[1].coefficients()[1]
m3 = N - b[2].coefficients()[1]

# check
print(m1 + m2 + m3 == H)

# decode
print(bytes.fromhex(hex(m1)[2:]))
print(bytes.fromhex(hex(m2)[2:]))
print(bytes.fromhex(hex(m3)[2:]))
