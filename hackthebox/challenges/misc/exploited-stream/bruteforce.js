const crypto = require("crypto");
const names = require("all-the-package-names");

// password_is_the_name_of_one_npm_package
const for_future_me = "cGFzc3dvcmRfaXNfdGhlX25hbWVfb2Zfb25lX25wbV9wYWNrYWdl";

// target ciphertext
const noxc = "83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460";
const password_length = 18;

function check_if_ascii(str) {
    return /^[\x00-\x7F]*$/.test(str);
}

function check_password(password, plaintext) {
    return password.length == password_length && check_if_ascii(plaintext);
}

function ascii_to_binary(blob) {
    let _output = [];
    for (let i = 0; i < blob.length; i++) {
        let c = blob.charAt(i).charCodeAt(0);
        let d = (c & 3) << 3 | c >> 2;
        _output.push(d);
    }
    return _output;
}

function decrypt(ciphertext, algorithm, password) {
    let decipher = crypto.createDecipher(algorithm, password);
    let plaintext = decipher.update(ciphertext, "hex", "utf8");
    plaintext += decipher.final("utf8"); // String()?
    return plaintext;
}

function brute_decrypt(ciphertext, algorithm, wordlist) {
    wordlist.forEach(function check_pwd(name){
        let plaintext = decrypt(ciphertext, algorithm, name);
        if (check_password(name, plaintext)) {
            console.log("[+] Password found!");
            console.log("\t" + name);
            console.log("\t" + plaintext);
            return plaintext;
        }
    });
    return "";
}

try {
    let password_guess = global.process.argv[2];

    console.log("[+] Parameters:\n\tPassword:"+password_guess+"\n\tAlgorithm: aes-256-ctr\n\tProcess:"+global.process+"\n\tCiphertext: "+noxc);

    if (!password_guess) {
        console.log("[+] Bruteforcing...");
        brute_decrypt(noxc, "aes-256-ctr", names.filter(name => name.includes('stream')));
    } else {
        console.log("[+] Trying a single password.")
        console.log("\t" + password_guess);
        console.log("\t" + decrypt(noxc, "aes-256-ctr", password_guess));
    }
} catch (err) {
    console.log(err);
}
