#!/usr/bin/env python

from Crypto.Cipher import AES
from Crypto.Util.number import isPrime, getPrime, GCD, long_to_bytes, bytes_to_long
from hashlib import md5
from sage.arith.misc import crt
from sage.schemes.elliptic_curves.constructor import EllipticCurve

# ===================================================================== problem

CT = bytes.fromhex('11527ef661b63f0e8df26e78d79b614cb63e834da05bf333856a97f81d74aec58aefbda52dd6ee164447cb3cd64869aee935d9e961ea12375354eea7e21a6790')
IV = bytes.fromhex('2d2e1e8a88205995ce2d76d244c28b2b')
N  = 6977872954453287113318928946533004640573076971270404736649857554109814714767232598626781851567154954553736188657231769647898054950996488674893670519816653
A  = (2851572783042418026133996814250879893796058672204604585672807372129430580698309059946087548171123066371647509247443388126483506717427455136382648462997156, 6229895414423825093970708176923792736711251122090113458666591518448699655186597924150954711460449644605774495375106765029330485916590545376676075133841422)
B  = (4462129553869194635110347913537781447163673151204817501735057255299985150330059138351040776905457304373656070189763506501461514517702259280043082926076418, 1012904040892509457148773549664059101097406279754569553936756270049573187157782900888372009243941138782308618768537282105721569482060963331594736944741842)

# =================================================================== utilities

def next_prime(p, step, rest=1):
    __p = p - (p % step) + rest + step
    while not isPrime(__p):
        __p += step
    return __p

def ec_parameters(p1, p2, n):
    __x1, __y1 = p1
    __x2, __y2 = p2
    __a = ((__y1 ** 2) - (__x1 ** 3) - (__y2 ** 2) + (__x2 ** 3) % n) * pow(__x1 - __x2, -1, n)
    __b = (__y1 ** 2) - (__x1 ** 3) - (__a * __x1)
    return (__a % n, __b % n)

# ==================================================================== factor N

# q = next_prime(int(sqrt(N)), 4, 3) # force p % 4 == 3
# while N % q != 0:
#     q = next_prime(q, 4, 3)

# p = N // q
p = 83533663600091712446566994191789220991430106051937633587789852519272240462807
q = 83533663600091712446566994191789220991430106051937633587789852519272240470779
e = next_prime(p >> (len(p.digits(2)) // 2), 2, 1)

# =============================================================== EC parameters

a, b = ec_parameters(A, B, N)

# =================================================================== generator

GP = GF(p)
GQ = GF(q)
ecp = EllipticCurve(GP, [a, b])
ecq = EllipticCurve(GQ, [a, b])

ap = ecp(A[0], A[1])
aq = ecq(A[0], A[1])

ep_1 = inverse_mod(e, ecp.order())
eq_1 = inverse_mod(e, ecq.order())
gp = ep_1 * ap
gq = eq_1 * aq

gx = crt([int(gp[0]), int(gq[0])], [p, q])

# ===================================================================== decrypt

key = md5(str(gx).encode()).digest()
cipher = AES.new(key,AES.MODE_CBC, IV)
flag = cipher.decrypt(CT)

print(flag)
